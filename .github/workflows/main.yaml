name: Build & Distribute Android

on:
  pull_request:
    types:
      - closed
    branches:
      - master
      - development

jobs:
  build_android:
    if: github.event.pull_request.merged == true
    name: Build & Distribute Android APK
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ github.token }}

    steps:
      # Step 1: Checkout source
      - name: 📥 Checkout source
        uses: actions/checkout@v3

      # Step 2: Set up Java
      - name: 🔧 Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: "zulu"
          java-version: "17"

      # Step 3: Set up Flutter
      - name: 🔧 Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: "stable"
          architecture: x64

      # Step 4: Install dependencies
      - name: 📦 Install Flutter dependencies
        run: flutter pub get

      # Step 5: Create environment config dynamically
      - name: 📁 Create environment config
        run: |
          mkdir -p assets/env
          BASE_BRANCH="${{ github.base_ref }}"
          if [[ "$BASE_BRANCH" == "development" ]]; then
            echo "${{ secrets.DEV_ENV_JSON_BASE64 }}" | base64 --decode > assets/env/development.json
            echo "${{ secrets.ENV_BASE64 }}" | base64 --decode > assets/env/.env
            echo "ENV_NAME=development" >> $GITHUB_ENV
          else
            echo "${{ secrets.PROD_ENV_JSON_BASE64 }}" | base64 --decode > assets/env/production.json
            echo "${{ secrets.ENV_BASE64 }}" | base64 --decode > assets/env/.env
            echo "ENV_NAME=production" >> $GITHUB_ENV
          fi

      # Step 6: Print info
      - name: 🐛 Print branch and environment
        run: |
          echo "Merged Into Branch: ${{ github.base_ref }}"
          echo "ENV_NAME: ${{ env.ENV_NAME }}"

      # Step 7: Run tests
      - name: 🧪 Run tests
        run: flutter test

      # Step 8: Build APK
      - name: 🏗️ Build Android APK
        run: flutter build apk --release --dart-define=env=${{ env.ENV_NAME }}

      # Step 9: Install Firebase CLI
      - name: 🔧 Install Firebase CLI
        run: npm install -g firebase-tools

      # Step 10: Authenticate with Firebase
      - name: 🔐 Authenticate with Firebase
        run: |
          echo "${{ secrets.GCLOUD_SERVICE_ACCOUNT_JSON }}" | base64 --decode > $HOME/firebase-service-account.json
          echo "GOOGLE_APPLICATION_CREDENTIALS=$HOME/firebase-service-account.json" >> $GITHUB_ENV

      - name: 🛠 Install GitHub CLI
        run: sudo apt-get install -y gh

      - name: 🔖 Bump version, tag, and release
        run: |
        # Step 1: Extract version
          version_line=$(grep '^version: ' pubspec.yaml || true)
          if [ -z "$version_line" ]; then
            echo "❌ version not found in pubspec.yaml"
            exit 1
          fi

          current_version=$(echo "$version_line" | awk '{print $2}')
          base_version="${current_version%%+*}"
          build_number="${current_version##*+}"

          if ! [[ "$base_version" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "❌ Invalid base version format: $base_version"
            exit 1
          fi

          IFS='.' read -r major minor patch <<< "$base_version"
          echo "✅ Current version: $major.$minor.$patch+$build_number"

          # Step 2: Determine bump type from last commit message
          commit_message=$(git log -1 --pretty=%B)
          if echo "$commit_message" | grep -iq "#major"; then
            major=$((major + 1)); minor=0; patch=0
            echo "🔼 Bumping MAJOR"
          elif echo "$commit_message" | grep -iq "#minor"; then
            minor=$((minor + 1)); patch=0
            echo "🔼 Bumping MINOR"
          else
            patch=$((patch + 1))
            echo "🔼 Bumping PATCH"
          fi

          # Step 3: Build new version
          new_base="$major.$minor.$patch"
          build_number=1
          while true; do
            new_tag="v${new_base}+${build_number}"
            if git rev-parse "$new_tag" >/dev/null 2>&1; then
              build_number=$((build_number + 1))
            else
              break
            fi
          done

          full_version="${new_base}+${build_number}"
          git_tag="v$full_version"
          release_tag="v$new_base"  # For GitHub release (no '+')

          echo "🔖 Full version: $full_version"
          echo "🏷️ Git tag: $git_tag"
          echo "📦 GitHub release tag: $release_tag"

          # Step 4: Update pubspec.yaml (cross-platform)
          if [[ "$OSTYPE" == "darwin"* ]]; then
            sed -i '' "s/^version: .*/version: $full_version/" pubspec.yaml
          else
            sed -i "s/^version: .*/version: $full_version/" pubspec.yaml
          fi

          # Step 5: Git config and push
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git

          git add pubspec.yaml

          if ! git diff --cached --quiet; then
            git commit -m "chore(release): $git_tag"
            git tag "$git_tag"
            git push origin HEAD
            git push origin "$git_tag"
          else
            echo "✅ No changes to commit."
          fi

          # Step 6: Create GitHub release
          gh release create "$release_tag" \
            --title "$release_tag" \
            --notes "🔖 Released $git_tag based on commit: $commit_message"

