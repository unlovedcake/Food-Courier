name: Build & Distribute Android

on:
  pull_request:
    types:
      - closed
    branches:
      - master
      - development

jobs:
  build_android:
    if: github.event.pull_request.merged == true
    name: Build & Distribute Android APK
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ github.token }}

    steps:
      # Step 1: Checkout source
      - name: 📥 Checkout source
        uses: actions/checkout@v3

      # Step 2: Set up Java
      - name: 🔧 Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: "zulu"
          java-version: "17"

      # Step 3: Set up Flutter
      - name: 🔧 Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: "stable"
          architecture: x64

      # Step 4: Install dependencies
      - name: 📦 Install Flutter dependencies
        run: flutter pub get

      # Step 5: Create environment config dynamically
      - name: 📁 Create environment config
        run: |
          mkdir -p assets/env
          BASE_BRANCH="${{ github.base_ref }}"
          if [[ "$BASE_BRANCH" == "development" ]]; then
            echo "${{ secrets.DEV_ENV_JSON_BASE64 }}" | base64 --decode > assets/env/development.json
            echo "${{ secrets.ENV_BASE64 }}" | base64 --decode > assets/env/.env
            echo "ENV_NAME=development" >> $GITHUB_ENV
          else
            echo "${{ secrets.PROD_ENV_JSON_BASE64 }}" | base64 --decode > assets/env/production.json
            echo "${{ secrets.ENV_BASE64 }}" | base64 --decode > assets/env/.env
            echo "ENV_NAME=production" >> $GITHUB_ENV
          fi

      # Step 6: Print info
      - name: 🐛 Print branch and environment
        run: |
          echo "Merged Into Branch: ${{ github.base_ref }}"
          echo "ENV_NAME: ${{ env.ENV_NAME }}"

      # Step 7: Run tests
      - name: 🧪 Run tests
        run: flutter test

      # Step 8: Build APK
      - name: 🏗️ Build Android APK
        run: flutter build apk --release --dart-define=env=${{ env.ENV_NAME }}

      # Step 9: Install Firebase CLI
      - name: 🔧 Install Firebase CLI
        run: npm install -g firebase-tools

      # Step 10: Authenticate with Firebase
      - name: 🔐 Authenticate with Firebase
        run: |
          echo "${{ secrets.GCLOUD_SERVICE_ACCOUNT_JSON }}" | base64 --decode > $HOME/firebase-service-account.json
          echo "GOOGLE_APPLICATION_CREDENTIALS=$HOME/firebase-service-account.json" >> $GITHUB_ENV

      - name: 🛠 Install GitHub CLI
        run: |
          sudo apt-get install -y gh

      - name: 🔖 Bump version, update pubspec.yaml, tag, and release
        run: |
          # Read current version
          version=$(grep '^ *version:' pubspec.yaml | sed -E 's/^ *version:[[:space:]]*//')

          # Step 2: Split base and build
          base="${version%%+*}"    # 1.0.0
          build="${version##*+}"   # 1
          new_build=$((build + 1)) # increment to 2

          # Step 3: Compose new version
          new_version="${base}+${new_build}"
          safe_tag="v${base}-${new_build}"

          echo "🔹 Base version: $base"
          echo "🔢 Current build: $build → New build: $new_build"
          echo "📦 New version: $new_version"
          echo "🏷️ Git tag: $safe_tag"

          # Step 4: Update pubspec.yaml
          if [[ "$OSTYPE" == "darwin"* ]]; then
            sed -i '' "s/^version: .*/version: $new_version/" pubspec.yaml
          else
            sed -i "s/^version: .*/version: $new_version/" pubspec.yaml
          fi

          # Step 5: Commit and tag
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"
          git add pubspec.yaml
          git commit -m "chore: bump version to $new_version"
          git tag "$safe_tag"
          git push origin HEAD
          git push origin "$safe_tag"

        # Step 12: Upload APK to Firebase
      - name: 🚀 Upload APK to Firebase
        run: |
          firebase appdistribution:distribute build/app/outputs/flutter-apk/app-release.apk \
            --app "${{ secrets.FIREBASE_APP_ID }}" \
            --groups testers \
            --release-notes "New release from GitHub Actions"
