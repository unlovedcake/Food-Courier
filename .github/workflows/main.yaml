name: Build & Distribute Android

on:
  pull_request:
    types:
      - closed
    branches:
      - master
      - development

jobs:
  build_android:
    if: github.event.pull_request.merged == true
    name: Build & Distribute Android APK
    runs-on: macos-latest

    steps:
      # Step 1: Checkout source
      - name: 📥 Checkout source
        uses: actions/checkout@v3

      # Step 2: Set up Java
      - name: 🔧 Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: "zulu"
          java-version: "17"

      - name: 🔐 Check token available
        run: echo "Token starts with: ${GITHUB_TOKEN:0:5}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}    

      # Step 3: Set up Flutter
      - name: 🔧 Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: "stable"
          architecture: x64

      # Step 4: Install dependencies
      - name: 📦 Install Flutter dependencies
        run: flutter pub get

      # Step 5: Create environment config dynamically
      - name: 📁 Create environment config
        run: |
          mkdir -p assets/env
          BASE_BRANCH="${{ github.base_ref }}"
          if [[ "$BASE_BRANCH" == "development" ]]; then
            echo "${{ secrets.DEV_ENV_JSON_BASE64 }}" | base64 --decode > assets/env/development.json
            echo "${{ secrets.ENV_BASE64 }}" | base64 --decode > assets/env/.env
            echo "ENV_NAME=development" >> $GITHUB_ENV
          else
            echo "${{ secrets.PROD_ENV_JSON_BASE64 }}" | base64 --decode > assets/env/production.json
            echo "${{ secrets.ENV_BASE64 }}" | base64 --decode > assets/env/.env
            echo "ENV_NAME=production" >> $GITHUB_ENV
          fi

      # Step 6: Print info
      - name: 🐛 Print branch and environment
        run: |
          echo "Merged Into Branch: ${{ github.base_ref }}"
          echo "ENV_NAME: ${{ env.ENV_NAME }}"

      # Step 7: Run tests
      - name: 🧪 Run tests
        run: flutter test

      # Step 8: Build APK
      - name: 🏗️ Build Android APK
        run: flutter build apk --release --dart-define=env=${{ env.ENV_NAME }}

      # Step 9: Install Firebase CLI
      - name: 🔧 Install Firebase CLI
        run: npm install -g firebase-tools

      # Step 10: Authenticate with Firebase
      - name: 🔐 Authenticate with Firebase
        run: |
          echo "${{ secrets.GCLOUD_SERVICE_ACCOUNT_JSON }}" | base64 --decode > $HOME/firebase-service-account.json
          echo "GOOGLE_APPLICATION_CREDENTIALS=$HOME/firebase-service-account.json" >> $GITHUB_ENV

      # Step 11: 🔖 Auto-increment Version, Update pubspec.yaml, and Tag
      - name: 🔖 Bump version, update pubspec.yaml, and create Git tag
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"

          # Fetch all tags and checkout base branch
          git fetch --tags
          git checkout ${{ github.base_ref }}

          # Get latest tag or default to v1.0.0
          latest_tag=$(git tag --sort=-v:refname | tail -n 1)
          if [ -z "$latest_tag" ]; then
            major=1
            minor=0
            patch=0
            base_version="v$major.$minor.$patch"
            echo "No tags found. Starting at $base_version"
          else
            echo "Latest tag: $latest_tag"
            version=${latest_tag#v}
            IFS='.' read -r major minor patch <<< "$version"
          fi

          # Determine bump type from last commit message
          commit_message=$(git log -1 --pretty=%B)
          echo "Last commit message: $commit_message"

          if echo "$commit_message" | grep -q "#major"; then
            major=$((major + 1))
            minor=0
            patch=0
            bump_type="major"
          elif echo "$commit_message" | grep -q "#minor"; then
            minor=$((minor + 1))
            patch=0
            bump_type="minor"
          else
            patch=$((patch + 1))
            bump_type="patch"
          fi

          new_tag="v$major.$minor.$patch"
          flutter_version="$major.$minor.$patch+1"
          echo "Bump type: $bump_type"
          echo "New tag: $new_tag"
          echo "Flutter version: $flutter_version"

          # Update pubspec.yaml
          VERSION=${{ github.event.inputs.version }}+1
          if [[ "$OSTYPE" == "darwin"* ]]; then
            # macOS (BSD sed)
            sed -i '' "s/^version: .*/version: $VERSION/" pubspec.yaml
          else
            # Linux (GNU sed)
            sed -i "s/^version: .*/version: $VERSION/" pubspec.yaml
          fi

          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"
          git commit -am "chore: release version v${{ github.event.inputs.version }}"

          # 🛠 Use token-authenticated remote URL to allow push
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git


          git tag "v${{ github.event.inputs.version }}"
          git push origin HEAD
          git push origin "v${{ github.event.inputs.version }}"

        # Step 12: Upload APK to Firebase
      - name: 🚀 Upload APK to Firebase
        run: |
          firebase appdistribution:distribute build/app/outputs/flutter-apk/app-release.apk \
            --app "${{ secrets.FIREBASE_APP_ID }}" \
            --groups testers \
            --release-notes "New release from GitHub Actions"
