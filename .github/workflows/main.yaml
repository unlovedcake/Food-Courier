on:
  pull_request:
    branches:
      - main
      - master
  push:
    branches:
      - main
      - master
      - develop
name: "Build & Release"
jobs:
  build:
    name: Build & Release
    runs-on: macos-latest
    steps:
      # Step 1: Checkout the code
      - uses: actions/checkout@v3
      - uses: actions/setup-java@v3
        with:
          distribution: "zulu"
          java-version: "17.x"
      # Step 2: Set up Flutter environment
      - uses: subosito/flutter-action@v2
        with:
          channel: "stable"
          architecture: x64

      # Step 3: Install dependencies
      - name: Install dependencies
        run: flutter pub get

      - name: Create prod.json file from secret
        run: |
          mkdir -p assets/env
          echo '${{ secrets.PROD_ENV_JSON }}' > assets/env/prod.json

      # Step 6: Build APK for Android
      - name: Build Flutter APK with production env
        run: flutter build apk --release --dart-define=env=production

      - name: ðŸ”§ Install Firebase CLI
        run: npm install -g firebase-tools

      - name: ðŸšš Upload APK to Firebase App Distribution
        run: |
          firebase appdistribution:distribute build/app/outputs/flutter-apk/app-release.apk \
            --app "${{ secrets.FIREBASE_APP_ID }}" \
            --token "${{ secrets.FIREBASE_AUTH_TOKEN }}" \
            --groups testers

    # For iOS:
    # - name: Deploy to TestFlight
    #   run: |
    #     fastlane deliver --ipa output/ipa/Runner.ipa --username ${{ secrets.APPLE_ID }}

# push to master, main, develop
# pull request on main master
